// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: proto/wizard/wizard.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WizardService_CreateWizard_FullMethodName = "/wizard.WizardService/CreateWizard"
	WizardService_GetWizard_FullMethodName    = "/wizard.WizardService/GetWizard"
	WizardService_UpdateWizard_FullMethodName = "/wizard.WizardService/UpdateWizard"
	WizardService_ListWizards_FullMethodName  = "/wizard.WizardService/ListWizards"
	WizardService_DeleteWizard_FullMethodName = "/wizard.WizardService/DeleteWizard"
)

// WizardServiceClient is the client API for WizardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WizardServiceClient interface {
	CreateWizard(ctx context.Context, in *CreateWizardRequest, opts ...grpc.CallOption) (*Wizard, error)
	GetWizard(ctx context.Context, in *GetWizardRequest, opts ...grpc.CallOption) (*Wizard, error)
	UpdateWizard(ctx context.Context, in *UpdateWizardRequest, opts ...grpc.CallOption) (*Wizard, error)
	ListWizards(ctx context.Context, in *ListWizardsRequest, opts ...grpc.CallOption) (*ListWizardsResponse, error)
	DeleteWizard(ctx context.Context, in *DeleteWizardRequest, opts ...grpc.CallOption) (*DeleteWizardResponse, error)
}

type wizardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWizardServiceClient(cc grpc.ClientConnInterface) WizardServiceClient {
	return &wizardServiceClient{cc}
}

func (c *wizardServiceClient) CreateWizard(ctx context.Context, in *CreateWizardRequest, opts ...grpc.CallOption) (*Wizard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wizard)
	err := c.cc.Invoke(ctx, WizardService_CreateWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) GetWizard(ctx context.Context, in *GetWizardRequest, opts ...grpc.CallOption) (*Wizard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wizard)
	err := c.cc.Invoke(ctx, WizardService_GetWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) UpdateWizard(ctx context.Context, in *UpdateWizardRequest, opts ...grpc.CallOption) (*Wizard, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wizard)
	err := c.cc.Invoke(ctx, WizardService_UpdateWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) ListWizards(ctx context.Context, in *ListWizardsRequest, opts ...grpc.CallOption) (*ListWizardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWizardsResponse)
	err := c.cc.Invoke(ctx, WizardService_ListWizards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wizardServiceClient) DeleteWizard(ctx context.Context, in *DeleteWizardRequest, opts ...grpc.CallOption) (*DeleteWizardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWizardResponse)
	err := c.cc.Invoke(ctx, WizardService_DeleteWizard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WizardServiceServer is the server API for WizardService service.
// All implementations must embed UnimplementedWizardServiceServer
// for forward compatibility.
type WizardServiceServer interface {
	CreateWizard(context.Context, *CreateWizardRequest) (*Wizard, error)
	GetWizard(context.Context, *GetWizardRequest) (*Wizard, error)
	UpdateWizard(context.Context, *UpdateWizardRequest) (*Wizard, error)
	ListWizards(context.Context, *ListWizardsRequest) (*ListWizardsResponse, error)
	DeleteWizard(context.Context, *DeleteWizardRequest) (*DeleteWizardResponse, error)
	mustEmbedUnimplementedWizardServiceServer()
}

// UnimplementedWizardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWizardServiceServer struct{}

func (UnimplementedWizardServiceServer) CreateWizard(context.Context, *CreateWizardRequest) (*Wizard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWizard not implemented")
}
func (UnimplementedWizardServiceServer) GetWizard(context.Context, *GetWizardRequest) (*Wizard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWizard not implemented")
}
func (UnimplementedWizardServiceServer) UpdateWizard(context.Context, *UpdateWizardRequest) (*Wizard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWizard not implemented")
}
func (UnimplementedWizardServiceServer) ListWizards(context.Context, *ListWizardsRequest) (*ListWizardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWizards not implemented")
}
func (UnimplementedWizardServiceServer) DeleteWizard(context.Context, *DeleteWizardRequest) (*DeleteWizardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWizard not implemented")
}
func (UnimplementedWizardServiceServer) mustEmbedUnimplementedWizardServiceServer() {}
func (UnimplementedWizardServiceServer) testEmbeddedByValue()                       {}

// UnsafeWizardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WizardServiceServer will
// result in compilation errors.
type UnsafeWizardServiceServer interface {
	mustEmbedUnimplementedWizardServiceServer()
}

func RegisterWizardServiceServer(s grpc.ServiceRegistrar, srv WizardServiceServer) {
	// If the following call pancis, it indicates UnimplementedWizardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WizardService_ServiceDesc, srv)
}

func _WizardService_CreateWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWizardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).CreateWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_CreateWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).CreateWizard(ctx, req.(*CreateWizardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_GetWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWizardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).GetWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_GetWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).GetWizard(ctx, req.(*GetWizardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_UpdateWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWizardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).UpdateWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_UpdateWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).UpdateWizard(ctx, req.(*UpdateWizardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_ListWizards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWizardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).ListWizards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_ListWizards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).ListWizards(ctx, req.(*ListWizardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WizardService_DeleteWizard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWizardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WizardServiceServer).DeleteWizard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WizardService_DeleteWizard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WizardServiceServer).DeleteWizard(ctx, req.(*DeleteWizardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WizardService_ServiceDesc is the grpc.ServiceDesc for WizardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WizardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wizard.WizardService",
	HandlerType: (*WizardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWizard",
			Handler:    _WizardService_CreateWizard_Handler,
		},
		{
			MethodName: "GetWizard",
			Handler:    _WizardService_GetWizard_Handler,
		},
		{
			MethodName: "UpdateWizard",
			Handler:    _WizardService_UpdateWizard_Handler,
		},
		{
			MethodName: "ListWizards",
			Handler:    _WizardService_ListWizards_Handler,
		},
		{
			MethodName: "DeleteWizard",
			Handler:    _WizardService_DeleteWizard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wizard/wizard.proto",
}
